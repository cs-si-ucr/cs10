{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to CS10 SI!\n\n\nWe will be using this website throughout the quarter for SI Lecture and SI Lab. The material on this website is meant to reinforce your learning for the course. \n\n\nGeneral Info\n\n\nInstructors:\n \n\n\n\n\nKelly Downey \n[kelly@cs.ucr.edu]\n\n\n\n\nSI Leaders:\n\n\n\n\nKennen DeRenard \n[kdere004@ucr.edu]\n\n\nGuthrie Price \n[gpric001@ucr.edu]\n\n\n\n\nWhat is SI?\n\n\nSupplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.\n\n\nWhat isn\u2019t SI?\n\n\nSupplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.\n\n\nWho should go?\n\n\nAnyone who has the time to spare;\nwhether you have been programming on the side for a number of years or if your only experience with computers is writing essays and checking Facebook,\nI promise you I will be able to help you learn something new that will help your perform better in the course.\n\n\nHowever, if you are having trouble in the class or think you might run into trouble, you should definitely attend.\nCS 10 has a high dropout rate, along with a high failure rate, so if you are running into trouble, let me help you.\nDo not be intimidated if you are trying to start coming later in the quarter (though try not to wait that long), I will help bring you up to speed.\n\n\nGuidelines:\n\n\n\n\nBe respectful - This includes silencing your cell phones and not using them during sessions.\n\n\nParticipate - You won\u2019t get very much out of SI if you don\u2019t.\n\n\nNo food or drink besides water - This is a rule placed by the administration. I will enforce it.\n\n\nLate entry and early exit should be quiet - I realize everyone\u2019s schedules are different.\nHowever, please do not enter or leave in such a way that draws everyone\u2019s attention to you.\n\n\nSign in - There will usually be a working computer for you to sign into when you arrive.\nPlease use it to check in (even if you\u2019re not on time).", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-cs10-si", 
            "text": "We will be using this website throughout the quarter for SI Lecture and SI Lab. The material on this website is meant to reinforce your learning for the course.", 
            "title": "Welcome to CS10 SI!"
        }, 
        {
            "location": "/#general-info", 
            "text": "Instructors:     Kelly Downey  [kelly@cs.ucr.edu]   SI Leaders:   Kennen DeRenard  [kdere004@ucr.edu]  Guthrie Price  [gpric001@ucr.edu]", 
            "title": "General Info"
        }, 
        {
            "location": "/#what-is-si", 
            "text": "Supplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.", 
            "title": "What is SI?"
        }, 
        {
            "location": "/#what-isnt-si", 
            "text": "Supplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.", 
            "title": "What isn\u2019t SI?"
        }, 
        {
            "location": "/#who-should-go", 
            "text": "Anyone who has the time to spare;\nwhether you have been programming on the side for a number of years or if your only experience with computers is writing essays and checking Facebook,\nI promise you I will be able to help you learn something new that will help your perform better in the course.  However, if you are having trouble in the class or think you might run into trouble, you should definitely attend.\nCS 10 has a high dropout rate, along with a high failure rate, so if you are running into trouble, let me help you.\nDo not be intimidated if you are trying to start coming later in the quarter (though try not to wait that long), I will help bring you up to speed.", 
            "title": "Who should go?"
        }, 
        {
            "location": "/#guidelines", 
            "text": "Be respectful - This includes silencing your cell phones and not using them during sessions.  Participate - You won\u2019t get very much out of SI if you don\u2019t.  No food or drink besides water - This is a rule placed by the administration. I will enforce it.  Late entry and early exit should be quiet - I realize everyone\u2019s schedules are different.\nHowever, please do not enter or leave in such a way that draws everyone\u2019s attention to you.  Sign in - There will usually be a working computer for you to sign into when you arrive.\nPlease use it to check in (even if you\u2019re not on time).", 
            "title": "Guidelines:"
        }, 
        {
            "location": "/dis01/", 
            "text": "Introduction\n\n\nCloud 9 registration link!: \nhttps://c9.io/\n\n\nCode Tracing\n\n\nWhat do the following programs output \n(If they dont compile what is wrong with the program?) :\n\n\n// 1\nusing namespace std;\n\nint main(){\n   cout \n \nHello World!\n\n\n   return 0;\n}\n\n// 2\n#include \niostream\n\nusing namespace std;\n\nint main(){\n   cout \n \nDoes\n; \n   cout \n This;\n   cout \n \nPrint\n;\n   cout \n ?;\n\n   return 0;\n}\n\n// 3\n#include \niostream\n\nusing namespace std;\n\nint main(){\n   cout \n \nHow \n;\n   cout \n \nAbout\n;\n   cout \n \n \\\nThis\\\n;\n   cout \n \n?\n;\n   cout \n endl;\n\n   return 0;\n}\n\n//4\n#include \niostream\n\nusing namespace std;\n\nint main(){\n   int test = 1;\n   string temp = \nline\n;\n   // The above two lines are variable declarations\n   // we will focus on this more next week\n   /* Tip:\n      multi-line comments can also be written like this!\n      FYI. */\n\n   cout \n \nLet's just write everything on\n \n test \n temp \n endl;\n\n   return 0;\n}\n\n\n\n\n\n\n\nFor future reference, we will assume that the lines:\n\n\n\n\n#include \niostream\n\nusing namespace std;\n\n\n\n\nare included at the top of the program, even if not shown.", 
            "title": "Discussion 1: Intro to iostream Library"
        }, 
        {
            "location": "/dis01/#introduction", 
            "text": "Cloud 9 registration link!:  https://c9.io/", 
            "title": "Introduction"
        }, 
        {
            "location": "/dis01/#code-tracing", 
            "text": "What do the following programs output \n(If they dont compile what is wrong with the program?) :  // 1\nusing namespace std;\n\nint main(){\n   cout    Hello World! \n\n   return 0;\n}\n\n// 2\n#include  iostream \nusing namespace std;\n\nint main(){\n   cout    Does ; \n   cout   This;\n   cout    Print ;\n   cout   ?;\n\n   return 0;\n}\n\n// 3\n#include  iostream \nusing namespace std;\n\nint main(){\n   cout    How  ;\n   cout    About ;\n   cout     \\ This\\ ;\n   cout    ? ;\n   cout   endl;\n\n   return 0;\n}\n\n//4\n#include  iostream \nusing namespace std;\n\nint main(){\n   int test = 1;\n   string temp =  line ;\n   // The above two lines are variable declarations\n   // we will focus on this more next week\n   /* Tip:\n      multi-line comments can also be written like this!\n      FYI. */\n\n   cout    Let's just write everything on    test   temp   endl;\n\n   return 0;\n}   For future reference, we will assume that the lines:   #include  iostream \nusing namespace std;  are included at the top of the program, even if not shown.", 
            "title": "Code Tracing"
        }, 
        {
            "location": "/lab01/", 
            "text": "iostream\n\n\niostream\n is the library you use to do input and output.\n\n\nThe most important parts to us this week are \ncin\n and \ncout\n.\n\n\ncin\n is used for\n\nkeyboard input\n\nand \ncout\n is used for\n\ncharacter output\n.\n\n\nYour first program\n\n\n#include \niostream\n\nusing namespace std;\n\nint main() {\n    cout \n \nHello world!\n \n endl;\n    return 0;\n}\n\n\n\n\nThe first line of code enables\n\ninput and output\n\n\nThe second line is magic.\nIgnore it for now.\n\n\nThe fourth line of code contains the main function.\nThis is the entry point for every c++ program you will ever create.\n\n\nThe fifth line prints \"Hello world!\" to the user's screen.\n\n\nThe sixth line stops the execution of this function, and says that everything went ok (the value 0).\n\n\nExercise 1\n\n\nWrite a story!\n\n\nGet into groups, and spend 10-15 minutes creating a story.\n\n\n\n\nWhat do we see when we're introduced to the world?\n\n\nWho's around?\n\n\nWhy are things the way they are?\n\n\n\n\nMake sure to leave holes in the story for character names, special objects, and the like.\nThen, write a program asking the user for this information!\nUse that information to tell the story you've come up with.\n\n\nMake sure no single line of code is longer than 80 characters!\nAlso, some output formatting would be nice.\nStart a new line after every sentence!\n\n\nIf you want a challenge, start a new line every 80 \noutput\n characters\n(notice that output characters don't necessarily line up with the code).\n\n\nExercise 2\n\n\nShow me your ascii art!\n\n\nGoogle \"ascii art\" and find some pieces that you think are aesthetically pleasing.\nThen, write a program to print those out!\n\n\nExercise 3 (optional)\n\n\nWrite an interactive story!\n\n\nYou can use your story from exercise 1, and modify it a little.\nIf you don't want to do that, spend 10-15 minutes coming up with a new setting.\n\n\nNext, come up with 10 decisions our main character has to make.\n\n\nAfter you have the questions, put them code.\nThe answers (for simplicity) should be binary;\nthere are only 2 answers per question.\n\n\nAlso, you don't need to create a branching story tree!\nIf the player answers incorrectly, end the story.\nI can provide an example of how to code that on the board.\n\n\nThis activity involves material from chapter 3 (branches)!\nDon't attempt it unless you're comfortable with going ahead.\n\n\nQuiz!\n\n\nquiz01\n\n\nAnswers\n\n\nThe answers to the blank sections above are in white.\nHighlight them to reveal the answers!\nMake sure you at least attempt an answer first!", 
            "title": "Lab 1: Input and Output"
        }, 
        {
            "location": "/lab01/#iostream", 
            "text": "iostream  is the library you use to do input and output.  The most important parts to us this week are  cin  and  cout .  cin  is used for keyboard input \nand  cout  is used for character output .", 
            "title": "iostream"
        }, 
        {
            "location": "/lab01/#your-first-program", 
            "text": "#include  iostream \nusing namespace std;\n\nint main() {\n    cout    Hello world!    endl;\n    return 0;\n}  The first line of code enables input and output  The second line is magic.\nIgnore it for now.  The fourth line of code contains the main function.\nThis is the entry point for every c++ program you will ever create.  The fifth line prints \"Hello world!\" to the user's screen.  The sixth line stops the execution of this function, and says that everything went ok (the value 0).", 
            "title": "Your first program"
        }, 
        {
            "location": "/lab01/#exercise-1", 
            "text": "Write a story!  Get into groups, and spend 10-15 minutes creating a story.   What do we see when we're introduced to the world?  Who's around?  Why are things the way they are?   Make sure to leave holes in the story for character names, special objects, and the like.\nThen, write a program asking the user for this information!\nUse that information to tell the story you've come up with.  Make sure no single line of code is longer than 80 characters!\nAlso, some output formatting would be nice.\nStart a new line after every sentence!  If you want a challenge, start a new line every 80  output  characters\n(notice that output characters don't necessarily line up with the code).", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab01/#exercise-2", 
            "text": "Show me your ascii art!  Google \"ascii art\" and find some pieces that you think are aesthetically pleasing.\nThen, write a program to print those out!", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab01/#exercise-3-optional", 
            "text": "Write an interactive story!  You can use your story from exercise 1, and modify it a little.\nIf you don't want to do that, spend 10-15 minutes coming up with a new setting.  Next, come up with 10 decisions our main character has to make.  After you have the questions, put them code.\nThe answers (for simplicity) should be binary;\nthere are only 2 answers per question.  Also, you don't need to create a branching story tree!\nIf the player answers incorrectly, end the story.\nI can provide an example of how to code that on the board.  This activity involves material from chapter 3 (branches)!\nDon't attempt it unless you're comfortable with going ahead.", 
            "title": "Exercise 3 (optional)"
        }, 
        {
            "location": "/lab01/#quiz", 
            "text": "quiz01", 
            "title": "Quiz!"
        }, 
        {
            "location": "/lab01/#answers", 
            "text": "The answers to the blank sections above are in white.\nHighlight them to reveal the answers!\nMake sure you at least attempt an answer first!", 
            "title": "Answers"
        }, 
        {
            "location": "/dis02/", 
            "text": "Introduction\n\n\nA variable is a\n\nnamed location in memory\n.\nThe name we give a variable is called an\n\nidentifier\n.\n\n\nVariables can be assigned to using the\n\n=\n operator.\n\n\nIn c++, \n* / % + -\n are mathematical operators, and can be used to\n\nmultiply\n,\n\ndivide\n,\n\nmodulo\n,\n\nadd\n, and\n\nsubtract\n two numbers, respectively.\n\n\nc++ math operators behave according to precedence.\n\n(\n)\n\nhas the highest precedence.\nNext is\n\n * / % \n,\nand they have the same precedence.\nLast are\n\n+\n\nand\n\n-\n;\nThey have the same precedence.\n\n\nWhen an expression has multiple operators of the same precedence, they are evaluated\n\nleft to right\n.\nFor instance, 4/1/2==(4/1)/2, and \nnot\n 4/(1/2).\n\n(the second would be a problem)\n\n\nArithmetic expressions don't always behave the way they do in math.\nIn math, 3/4==0.75 .\nIn c++, 3/4==\n0\n.\nDivision is the only operator that doesn't play nice.\nThe next most common integer arithmetic mistake is with precedence.\nThis can be avoided by using parenthesis, in most cases.\n\n\nBecause \nint\n only stores\n\nintegers\n,\nall fractional information is lost.\nIf you want to do math with fractional information included, use\n\ndouble\n.\n\n\nThe \nstring\n is used to store text information.\nA string can be thought of as a collection of\n\ncharacters\n.\n\n\nLastly, and most importantly, \n\nFOLLOW THE STYLE GUIDELINES\n.\n\n\nCode tracing\n\n\nWhat does each main function ouptut?\nAssume all required libraries are included.\nRefer to the next section for extra help.\n\n\n// 1\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    float temp3 = 2.0;\n\n    cout \n temp3 \n endl;\n    cout \n temp/ temp2 \n endl;\n\n    temp = temp2;\n    cout \n temp \n endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    double temp3 = 1.5;\n\n    temp3 = temp / temp2;\n    temp /= temp2;\n\n    cout \n temp3 \n \n, \n \n temp \n endl;\n\n    // some other primitive number variable types:\n    float temp4 = 5.5;     // half the precision of double\n    long temp5 = 9.1;\n    short temp6 = 4.7;\n    long long temp7 = 8.6;\n\n    cout \n temp4 + temp6 \n endl;\n    temp7 -= temp5;\n    cout \n temp7 \n endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    string jake = \njake\n;\n    string james = \njames\n;\n    char a = 'a';\n\n    jake = james;\n    cout \n jake \n endl;\n    jake = jake + james;\n    cout \n jake \n endl;\n\n    jake = \nj\n;\n    jake += a;\n    a += 12;\n    jake += a;\n    a -= 8;\n    jake += a;\n    a = ((a/ 2) * 3) - (12*2 + 4); // hint: http://www.ascii-code.com/\n    jake += a;\n    cout \n jake \n endl;\n\n    return 0;\n}\n\n// 4\nint main() {\n    int intgr = 20;\n    char letter = 'a';\n    double dbl = 10.67;\n\n    cout \n static_cast\nchar\n(letter + static_cast\nint\n(dbl) * 2 - intgr * 2.5);\n    cout \n static_cast\nchar\n((intgr * 2 + dbl * 4) + (dbl / 9));\n    cout \n \n \n \n intgr % 11 + 1;\n    string temp = \n;\n    temp += static_cast\nchar\n(intgr + 12);\n    temp += static_cast\nchar\n(letter + static_cast\nint\n(dbl) - 1.67);\n    temp += (18+ letter);\n    cout \n temp \n \n awesome!\n \n endl;\n\n    return 0;\n}\n\n\n\n\nExtra Help\n\n\n\n\ntype conversion specifics:\n\n\nstandard math library\n\n\nthe space character \n' '\n has an value of 32", 
            "title": "Discussion 2: Variables and Math"
        }, 
        {
            "location": "/dis02/#introduction", 
            "text": "A variable is a named location in memory .\nThe name we give a variable is called an identifier .  Variables can be assigned to using the =  operator.  In c++,  * / % + -  are mathematical operators, and can be used to multiply , divide , modulo , add , and subtract  two numbers, respectively.  c++ math operators behave according to precedence. ( ) \nhas the highest precedence.\nNext is  * / %  ,\nand they have the same precedence.\nLast are + \nand - ;\nThey have the same precedence.  When an expression has multiple operators of the same precedence, they are evaluated left to right .\nFor instance, 4/1/2==(4/1)/2, and  not  4/(1/2). (the second would be a problem)  Arithmetic expressions don't always behave the way they do in math.\nIn math, 3/4==0.75 .\nIn c++, 3/4== 0 .\nDivision is the only operator that doesn't play nice.\nThe next most common integer arithmetic mistake is with precedence.\nThis can be avoided by using parenthesis, in most cases.  Because  int  only stores integers ,\nall fractional information is lost.\nIf you want to do math with fractional information included, use double .  The  string  is used to store text information.\nA string can be thought of as a collection of characters .  Lastly, and most importantly,  FOLLOW THE STYLE GUIDELINES .", 
            "title": "Introduction"
        }, 
        {
            "location": "/dis02/#code-tracing", 
            "text": "What does each main function ouptut?\nAssume all required libraries are included.\nRefer to the next section for extra help.  // 1\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    float temp3 = 2.0;\n\n    cout   temp3   endl;\n    cout   temp/ temp2   endl;\n\n    temp = temp2;\n    cout   temp   endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    double temp3 = 1.5;\n\n    temp3 = temp / temp2;\n    temp /= temp2;\n\n    cout   temp3    ,     temp   endl;\n\n    // some other primitive number variable types:\n    float temp4 = 5.5;     // half the precision of double\n    long temp5 = 9.1;\n    short temp6 = 4.7;\n    long long temp7 = 8.6;\n\n    cout   temp4 + temp6   endl;\n    temp7 -= temp5;\n    cout   temp7   endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    string jake =  jake ;\n    string james =  james ;\n    char a = 'a';\n\n    jake = james;\n    cout   jake   endl;\n    jake = jake + james;\n    cout   jake   endl;\n\n    jake =  j ;\n    jake += a;\n    a += 12;\n    jake += a;\n    a -= 8;\n    jake += a;\n    a = ((a/ 2) * 3) - (12*2 + 4); // hint: http://www.ascii-code.com/\n    jake += a;\n    cout   jake   endl;\n\n    return 0;\n}\n\n// 4\nint main() {\n    int intgr = 20;\n    char letter = 'a';\n    double dbl = 10.67;\n\n    cout   static_cast char (letter + static_cast int (dbl) * 2 - intgr * 2.5);\n    cout   static_cast char ((intgr * 2 + dbl * 4) + (dbl / 9));\n    cout         intgr % 11 + 1;\n    string temp =  ;\n    temp += static_cast char (intgr + 12);\n    temp += static_cast char (letter + static_cast int (dbl) - 1.67);\n    temp += (18+ letter);\n    cout   temp     awesome!    endl;\n\n    return 0;\n}", 
            "title": "Code tracing"
        }, 
        {
            "location": "/dis02/#extra-help", 
            "text": "type conversion specifics:  standard math library  the space character  ' '  has an value of 32", 
            "title": "Extra Help"
        }, 
        {
            "location": "/lab02/", 
            "text": "Exercise 1\n\n\nAsk the user for 2 numbers, then divide them and show the result.\n\n\nExample:\n\n\n\n\nEnter the dividend: \n4\n\nEnter the divisor: \n2\n\n4 / 2 == 2\n\n\n\n\nExercise 2\n\n\nGet a character from the user, and display its integer equivalent.\nThe keyword for the character datatype is \nchar\n.\n\n\nExample:\n\n\n\n\nEnter a character: \nc\n\n'c' in decimal is 99.\n\n\n\n\n\n\n\nExercise 3\n\n\nGet a 5-character word from the user.\nConvert it to the \"proper\" capitalization (first letter is capitalized, and the rest are lowercase).\n\n\nExample:\n\n\n\n\nEnter a 5-character word: \nhElLo\n\nYour word is Hello.\n\n\n\n\nExercise 4\n\n\nWrite a program to perform modulus between two floating-point values.\nThe modulus operator \n%\n will not work on doubles.\nDo not use \nfmod\n from the cmath library (although you can use it to verify your results).\nDo not worry about negative values or modding by 0.\n\n\nHere is a hint:\n\n\n\n\nFor two positive integers N (numerator) and D (denominator),\n\nN can be expressed as D*m + R.\n\nm is some integer multiple of D.\n\nR is the remainder of the division between N and D.\n\nR = N - D*m\n\nR and m are unknowns in this equation.\n\nFind m to solve for R.\n\n\n\n\nExamples:\n\n\n\n\nEnter the dividend: \n23.4\n\nEnter the divisor: \n3.2\n\n23.4 % 3.2 == 1\n\n\nEnter the dividend: \n54.7\n\nEnter the divisor: \n3.14\n\n54.7 % 3.14 == 1.32\n\n\n\n\nExercise 5 (advanced)\n\n\nUse modulus and division to print the binary value of a character.\n\n\nExample:\n\n\n\n\nEnter a character: \nc\n\n'c' in binary is 01100011.\n\n\n\n\nHint: once you have the decimal value of a character [part 3],\nyou can google something like \"\n99 in binary\n\"\nto double-check your results.\nAlso, characters all have 8 bits.\n\n\n\n\n\nQuiz!\n\n\nquiz02", 
            "title": "Lab 2: Variables and Math"
        }, 
        {
            "location": "/lab02/#exercise-1", 
            "text": "Ask the user for 2 numbers, then divide them and show the result.  Example:   Enter the dividend:  4 \nEnter the divisor:  2 \n4 / 2 == 2", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab02/#exercise-2", 
            "text": "Get a character from the user, and display its integer equivalent.\nThe keyword for the character datatype is  char .  Example:   Enter a character:  c \n'c' in decimal is 99.", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab02/#exercise-3", 
            "text": "Get a 5-character word from the user.\nConvert it to the \"proper\" capitalization (first letter is capitalized, and the rest are lowercase).  Example:   Enter a 5-character word:  hElLo \nYour word is Hello.", 
            "title": "Exercise 3"
        }, 
        {
            "location": "/lab02/#exercise-4", 
            "text": "Write a program to perform modulus between two floating-point values.\nThe modulus operator  %  will not work on doubles.\nDo not use  fmod  from the cmath library (although you can use it to verify your results).\nDo not worry about negative values or modding by 0.  Here is a hint:   For two positive integers N (numerator) and D (denominator), \nN can be expressed as D*m + R. \nm is some integer multiple of D. \nR is the remainder of the division between N and D. \nR = N - D*m \nR and m are unknowns in this equation. \nFind m to solve for R.   Examples:   Enter the dividend:  23.4 \nEnter the divisor:  3.2 \n23.4 % 3.2 == 1  Enter the dividend:  54.7 \nEnter the divisor:  3.14 \n54.7 % 3.14 == 1.32", 
            "title": "Exercise 4"
        }, 
        {
            "location": "/lab02/#exercise-5-advanced", 
            "text": "Use modulus and division to print the binary value of a character.  Example:   Enter a character:  c \n'c' in binary is 01100011.   Hint: once you have the decimal value of a character [part 3],\nyou can google something like \" 99 in binary \"\nto double-check your results.\nAlso, characters all have 8 bits.", 
            "title": "Exercise 5 (advanced)"
        }, 
        {
            "location": "/lab02/#quiz", 
            "text": "quiz02", 
            "title": "Quiz!"
        }
    ]
}