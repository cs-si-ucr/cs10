{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to CS10 SI!\n\n\nWe will be using this website throughout the quarter for SI Lecture and SI Lab. The material on this website is meant to reinforce your learning for the course. \n\n\nGeneral Info\n\n\nInstructors:\n \n\n\n\n\nKelly Downey \n[kelly@cs.ucr.edu]\n\n\n\n\nSI Leaders:\n\n\n\n\nAndre Castro \n[acast050@ucr.edu]\n\n\nOmar Pereza \n[opera002@ucr.edu]\n\n\nAmanda Cao \n[acao004@ucr.edu]\n\n\nJohn Shin \n[jshin029@ucr.edu]\n\n\nAnkush \n[avang001@ucr.edu]\n\n\n\n\nWhat is SI?\n\n\nSupplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.\n\n\nWhat isn\u2019t SI?\n\n\nSupplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.\n\n\nWho should go?\n\n\nAnyone who has the time to spare;\nwhether you have been programming on the side for a number of years or if your only experience with computers is writing essays and checking Facebook,\nI promise you I will be able to help you learn something new that will help your perform better in the course.\n\n\nHowever, if you are having trouble in the class or think you might run into trouble, you should definitely attend.\nCS 10 has a high dropout rate, along with a high failure rate, so if you are running into trouble, let me help you.\nDo not be intimidated if you are trying to start coming later in the quarter (though try not to wait that long), I will help bring you up to speed.\n\n\nGuidelines:\n\n\n\n\nBe respectful - This includes silencing your cell phones and not using them during sessions.\n\n\nParticipate - You won\u2019t get very much out of SI if you don\u2019t.\n\n\nNo food or drink besides water - This is a rule placed by the administration. I will enforce it.\n\n\nLate entry and early exit should be quiet - I realize everyone\u2019s schedules are different.\nHowever, please do not enter or leave in such a way that draws everyone\u2019s attention to you.\n\n\nSign in - There will usually be a working computer for you to sign into when you arrive.\nPlease use it to check in (even if you\u2019re not on time).",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-cs10-si",
            "text": "We will be using this website throughout the quarter for SI Lecture and SI Lab. The material on this website is meant to reinforce your learning for the course.",
            "title": "Welcome to CS10 SI!"
        },
        {
            "location": "/#general-info",
            "text": "Instructors:     Kelly Downey  [kelly@cs.ucr.edu]   SI Leaders:   Andre Castro  [acast050@ucr.edu]  Omar Pereza  [opera002@ucr.edu]  Amanda Cao  [acao004@ucr.edu]  John Shin  [jshin029@ucr.edu]  Ankush  [avang001@ucr.edu]",
            "title": "General Info"
        },
        {
            "location": "/#what-is-si",
            "text": "Supplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.",
            "title": "What is SI?"
        },
        {
            "location": "/#what-isnt-si",
            "text": "Supplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.",
            "title": "What isn\u2019t SI?"
        },
        {
            "location": "/#who-should-go",
            "text": "Anyone who has the time to spare;\nwhether you have been programming on the side for a number of years or if your only experience with computers is writing essays and checking Facebook,\nI promise you I will be able to help you learn something new that will help your perform better in the course.  However, if you are having trouble in the class or think you might run into trouble, you should definitely attend.\nCS 10 has a high dropout rate, along with a high failure rate, so if you are running into trouble, let me help you.\nDo not be intimidated if you are trying to start coming later in the quarter (though try not to wait that long), I will help bring you up to speed.",
            "title": "Who should go?"
        },
        {
            "location": "/#guidelines",
            "text": "Be respectful - This includes silencing your cell phones and not using them during sessions.  Participate - You won\u2019t get very much out of SI if you don\u2019t.  No food or drink besides water - This is a rule placed by the administration. I will enforce it.  Late entry and early exit should be quiet - I realize everyone\u2019s schedules are different.\nHowever, please do not enter or leave in such a way that draws everyone\u2019s attention to you.  Sign in - There will usually be a working computer for you to sign into when you arrive.\nPlease use it to check in (even if you\u2019re not on time).",
            "title": "Guidelines:"
        },
        {
            "location": "/dis01/",
            "text": "Introduction\n\n\nCloud 9 registration link!: \nhttps://c9.io/\n\n\nCode Tracing\n\n\nWhat do the following programs output \n(If they dont compile what is wrong with the program?) :\n\n\n// 1\nusing namespace std;\n\nint main(){\n   cout << \"Hello World!\"\n\n   return 0;\n}\n\n// 2\n#include <iostream>\nusing namespace std;\n\nint main(){\n   cout << \"Does\"; \n   cout << This;\n   cout << \"\"Print\"\";\n   cout << ?;\n\n   return 0;\n}\n\n// 3\n#include <iostream>\nusing namespace std;\n\nint main(){\n   cout << \"How \";\n   cout << \"About\";\n   cout << \" \\\"This\\\"\";\n   cout << \"?\";\n   cout << endl;\n\n   return 0;\n}\n\n//4\n#include <iostream>\nusing namespace std;\n\nint main(){\n   int test = 1;\n   string temp = \"line\";\n   // The above two lines are variable declarations\n   // we will focus on this more next week\n   /* Tip:\n      multi-line comments can also be written like this!\n      FYI. */\n\n   cout << \"Let's just write everything on\" << test << temp << endl;\n\n   return 0;\n}\n\n\n\n\n\n\n\nFor future reference, we will assume that the lines:\n\n\n\n\n#include <iostream>\nusing namespace std;\n\n\n\n\nare included at the top of the program, even if not shown.",
            "title": "Discussion 1: Intro to iostream Library"
        },
        {
            "location": "/dis01/#introduction",
            "text": "Cloud 9 registration link!:  https://c9.io/",
            "title": "Introduction"
        },
        {
            "location": "/dis01/#code-tracing",
            "text": "What do the following programs output \n(If they dont compile what is wrong with the program?) :  // 1\nusing namespace std;\n\nint main(){\n   cout << \"Hello World!\"\n\n   return 0;\n}\n\n// 2\n#include <iostream>\nusing namespace std;\n\nint main(){\n   cout << \"Does\"; \n   cout << This;\n   cout << \"\"Print\"\";\n   cout << ?;\n\n   return 0;\n}\n\n// 3\n#include <iostream>\nusing namespace std;\n\nint main(){\n   cout << \"How \";\n   cout << \"About\";\n   cout << \" \\\"This\\\"\";\n   cout << \"?\";\n   cout << endl;\n\n   return 0;\n}\n\n//4\n#include <iostream>\nusing namespace std;\n\nint main(){\n   int test = 1;\n   string temp = \"line\";\n   // The above two lines are variable declarations\n   // we will focus on this more next week\n   /* Tip:\n      multi-line comments can also be written like this!\n      FYI. */\n\n   cout << \"Let's just write everything on\" << test << temp << endl;\n\n   return 0;\n}   For future reference, we will assume that the lines:   #include <iostream>\nusing namespace std;  are included at the top of the program, even if not shown.",
            "title": "Code Tracing"
        },
        {
            "location": "/lab01/",
            "text": "iostream\n\n\niostream\n is the library you use to do input and output.\n\n\nThe most important parts to us this week are \ncin\n and \ncout\n.\n\n\ncin\n is used for\n\nkeyboard input\n\nand \ncout\n is used for\n\ncharacter output\n.\n\n\nYour first program\n\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Hello world!\" << endl;\n    return 0;\n}\n\n\n\n\nThe first line of code enables\n\ninput and output\n\n\nThe second line is magic.\nIgnore it for now.\n\n\nThe fourth line of code contains the main function.\nThis is the entry point for every c++ program you will ever create.\n\n\nThe fifth line prints \"Hello world!\" to the user's screen.\n\n\nThe sixth line stops the execution of this function, and says that everything went ok (the value 0).\n\n\nExercise 1\n\n\nWrite a story!\n\n\nGet into groups, and spend 10-15 minutes creating a story.\n\n\n\n\nWhat do we see when we're introduced to the world?\n\n\nWho's around?\n\n\nWhy are things the way they are?\n\n\n\n\nMake sure to leave holes in the story for character names, special objects, and the like.\nThen, write a program asking the user for this information!\nUse that information to tell the story you've come up with.\n\n\nMake sure no single line of code is longer than 80 characters!\nAlso, some output formatting would be nice.\nStart a new line after every sentence!\n\n\nIf you want a challenge, start a new line every 80 \noutput\n characters\n(notice that output characters don't necessarily line up with the code).\n\n\nExercise 2\n\n\nShow me your ascii art!\n\n\nGoogle \"ascii art\" and find some pieces that you think are aesthetically pleasing.\nThen, write a program to print those out!\n\n\nExercise 3 (optional)\n\n\nWrite an interactive story!\n\n\nYou can use your story from exercise 1, and modify it a little.\nIf you don't want to do that, spend 10-15 minutes coming up with a new setting.\n\n\nNext, come up with 10 decisions our main character has to make.\n\n\nAfter you have the questions, put them code.\nThe answers (for simplicity) should be binary;\nthere are only 2 answers per question.\n\n\nAlso, you don't need to create a branching story tree!\nIf the player answers incorrectly, end the story.\nI can provide an example of how to code that on the board.\n\n\nThis activity involves material from chapter 3 (branches)!\nDon't attempt it unless you're comfortable with going ahead.\n\n\nQuiz!\n\n\nquiz01\n\n\nAnswers\n\n\nThe answers to the blank sections above are in white.\nHighlight them to reveal the answers!\nMake sure you at least attempt an answer first!",
            "title": "Lab 1: Input and Output"
        },
        {
            "location": "/lab01/#iostream",
            "text": "iostream  is the library you use to do input and output.  The most important parts to us this week are  cin  and  cout .  cin  is used for keyboard input \nand  cout  is used for character output .",
            "title": "iostream"
        },
        {
            "location": "/lab01/#your-first-program",
            "text": "#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Hello world!\" << endl;\n    return 0;\n}  The first line of code enables input and output  The second line is magic.\nIgnore it for now.  The fourth line of code contains the main function.\nThis is the entry point for every c++ program you will ever create.  The fifth line prints \"Hello world!\" to the user's screen.  The sixth line stops the execution of this function, and says that everything went ok (the value 0).",
            "title": "Your first program"
        },
        {
            "location": "/lab01/#exercise-1",
            "text": "Write a story!  Get into groups, and spend 10-15 minutes creating a story.   What do we see when we're introduced to the world?  Who's around?  Why are things the way they are?   Make sure to leave holes in the story for character names, special objects, and the like.\nThen, write a program asking the user for this information!\nUse that information to tell the story you've come up with.  Make sure no single line of code is longer than 80 characters!\nAlso, some output formatting would be nice.\nStart a new line after every sentence!  If you want a challenge, start a new line every 80  output  characters\n(notice that output characters don't necessarily line up with the code).",
            "title": "Exercise 1"
        },
        {
            "location": "/lab01/#exercise-2",
            "text": "Show me your ascii art!  Google \"ascii art\" and find some pieces that you think are aesthetically pleasing.\nThen, write a program to print those out!",
            "title": "Exercise 2"
        },
        {
            "location": "/lab01/#exercise-3-optional",
            "text": "Write an interactive story!  You can use your story from exercise 1, and modify it a little.\nIf you don't want to do that, spend 10-15 minutes coming up with a new setting.  Next, come up with 10 decisions our main character has to make.  After you have the questions, put them code.\nThe answers (for simplicity) should be binary;\nthere are only 2 answers per question.  Also, you don't need to create a branching story tree!\nIf the player answers incorrectly, end the story.\nI can provide an example of how to code that on the board.  This activity involves material from chapter 3 (branches)!\nDon't attempt it unless you're comfortable with going ahead.",
            "title": "Exercise 3 (optional)"
        },
        {
            "location": "/lab01/#quiz",
            "text": "quiz01",
            "title": "Quiz!"
        },
        {
            "location": "/lab01/#answers",
            "text": "The answers to the blank sections above are in white.\nHighlight them to reveal the answers!\nMake sure you at least attempt an answer first!",
            "title": "Answers"
        },
        {
            "location": "/dis02/",
            "text": "Introduction\n\n\nA variable is a\n\nnamed location in memory\n.\nThe name we give a variable is called an\n\nidentifier\n.\n\n\nVariables can be assigned to using the\n\n=\n operator.\n\n\nIn c++, \n* / % + -\n are mathematical operators, and can be used to\n\nmultiply\n,\n\ndivide\n,\n\nmodulo\n,\n\nadd\n, and\n\nsubtract\n two numbers, respectively.\n\n\nc++ math operators behave according to precedence.\n\n(\u00a0)\n\nhas the highest precedence.\nNext is\n\n * / % \n,\nand they have the same precedence.\nLast are\n\n+\n\nand\n\n-\n;\nThey have the same precedence.\n\n\nWhen an expression has multiple operators of the same precedence, they are evaluated\n\nleft to right\n.\nFor instance, 4/1/2==(4/1)/2, and \nnot\n 4/(1/2).\n\n(the second would be a problem)\n\n\nArithmetic expressions don't always behave the way they do in math.\nIn math, 3/4==0.75 .\nIn c++, 3/4==\n0\n.\nDivision is the only operator that doesn't play nice.\nThe next most common integer arithmetic mistake is with precedence.\nThis can be avoided by using parenthesis, in most cases.\n\n\nBecause \nint\n only stores\n\nintegers\n,\nall fractional information is lost.\nIf you want to do math with fractional information included, use\n\ndouble\n.\n\n\nThe \nstring\n is used to store text information.\nA string can be thought of as a collection of\n\ncharacters\n.\n\n\nLastly, and most importantly, \n\nFOLLOW THE STYLE GUIDELINES\n.\n\n\nCode tracing\n\n\nWhat does each main function ouptut?\nAssume all required libraries are included.\nRefer to the next section for extra help.\n\n\n// 1\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    float temp3 = 2.0;\n\n    cout << temp3 << endl;\n    cout << temp/ temp2 << endl;\n\n    temp = temp2;\n    cout << temp << endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    double temp3 = 1.5;\n\n    temp3 = temp / temp2;\n    temp /= temp2;\n\n    cout << temp3 << \", \" << temp << endl;\n\n    // some other primitive number variable types:\n    float temp4 = 5.5;     // half the precision of double\n    long temp5 = 9.1;\n    short temp6 = 4.7;\n    long long temp7 = 8.6;\n\n    cout << temp4 + temp6 << endl;\n    temp7 -= temp5;\n    cout << temp7 << endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    string jake = \"jake\";\n    string james = \"james\";\n    char a = 'a';\n\n    jake = james;\n    cout << jake << endl;\n    jake = jake + james;\n    cout << jake << endl;\n\n    jake = \"j\";\n    jake += a;\n    a += 12;\n    jake += a;\n    a -= 8;\n    jake += a;\n    a = ((a/ 2) * 3) - (12*2 + 4); // hint: http://www.ascii-code.com/\n    jake += a;\n    cout << jake << endl;\n\n    return 0;\n}\n\n// 4\nint main() {\n    int intgr = 20;\n    char letter = 'a';\n    double dbl = 10.67;\n\n    cout << static_cast<char>(letter + static_cast<int>(dbl) * 2 - intgr * 2.5);\n    cout << static_cast<char>((intgr * 2 + dbl * 4) + (dbl / 9));\n    cout << \" \" << intgr % 11 + 1;\n    string temp = \"\";\n    temp += static_cast<char>(intgr + 12);\n    temp += static_cast<char>(letter + static_cast<int>(dbl) - 1.67);\n    temp += (18+ letter);\n    cout << temp << \" awesome!\" << endl;\n\n    return 0;\n}\n\n\n\n\nExtra Help\n\n\n\n\ntype conversion specifics:\n\n\nstandard math library\n\n\nthe space character \n' '\n has an value of 32",
            "title": "Discussion 2: Variables and Math"
        },
        {
            "location": "/dis02/#introduction",
            "text": "A variable is a named location in memory .\nThe name we give a variable is called an identifier .  Variables can be assigned to using the =  operator.  In c++,  * / % + -  are mathematical operators, and can be used to multiply , divide , modulo , add , and subtract  two numbers, respectively.  c++ math operators behave according to precedence. (\u00a0) \nhas the highest precedence.\nNext is  * / %  ,\nand they have the same precedence.\nLast are + \nand - ;\nThey have the same precedence.  When an expression has multiple operators of the same precedence, they are evaluated left to right .\nFor instance, 4/1/2==(4/1)/2, and  not  4/(1/2). (the second would be a problem)  Arithmetic expressions don't always behave the way they do in math.\nIn math, 3/4==0.75 .\nIn c++, 3/4== 0 .\nDivision is the only operator that doesn't play nice.\nThe next most common integer arithmetic mistake is with precedence.\nThis can be avoided by using parenthesis, in most cases.  Because  int  only stores integers ,\nall fractional information is lost.\nIf you want to do math with fractional information included, use double .  The  string  is used to store text information.\nA string can be thought of as a collection of characters .  Lastly, and most importantly,  FOLLOW THE STYLE GUIDELINES .",
            "title": "Introduction"
        },
        {
            "location": "/dis02/#code-tracing",
            "text": "What does each main function ouptut?\nAssume all required libraries are included.\nRefer to the next section for extra help.  // 1\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    float temp3 = 2.0;\n\n    cout << temp3 << endl;\n    cout << temp/ temp2 << endl;\n\n    temp = temp2;\n    cout << temp << endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int temp = 4;\n    double temp2 = 2.5;\n    double temp3 = 1.5;\n\n    temp3 = temp / temp2;\n    temp /= temp2;\n\n    cout << temp3 << \", \" << temp << endl;\n\n    // some other primitive number variable types:\n    float temp4 = 5.5;     // half the precision of double\n    long temp5 = 9.1;\n    short temp6 = 4.7;\n    long long temp7 = 8.6;\n\n    cout << temp4 + temp6 << endl;\n    temp7 -= temp5;\n    cout << temp7 << endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    string jake = \"jake\";\n    string james = \"james\";\n    char a = 'a';\n\n    jake = james;\n    cout << jake << endl;\n    jake = jake + james;\n    cout << jake << endl;\n\n    jake = \"j\";\n    jake += a;\n    a += 12;\n    jake += a;\n    a -= 8;\n    jake += a;\n    a = ((a/ 2) * 3) - (12*2 + 4); // hint: http://www.ascii-code.com/\n    jake += a;\n    cout << jake << endl;\n\n    return 0;\n}\n\n// 4\nint main() {\n    int intgr = 20;\n    char letter = 'a';\n    double dbl = 10.67;\n\n    cout << static_cast<char>(letter + static_cast<int>(dbl) * 2 - intgr * 2.5);\n    cout << static_cast<char>((intgr * 2 + dbl * 4) + (dbl / 9));\n    cout << \" \" << intgr % 11 + 1;\n    string temp = \"\";\n    temp += static_cast<char>(intgr + 12);\n    temp += static_cast<char>(letter + static_cast<int>(dbl) - 1.67);\n    temp += (18+ letter);\n    cout << temp << \" awesome!\" << endl;\n\n    return 0;\n}",
            "title": "Code tracing"
        },
        {
            "location": "/dis02/#extra-help",
            "text": "type conversion specifics:  standard math library  the space character  ' '  has an value of 32",
            "title": "Extra Help"
        },
        {
            "location": "/lab02/",
            "text": "Exercise 1\n\n\nAsk the user for 2 numbers, then divide them and show the result.\n\n\nExample:\n\n\n\n\nEnter the dividend: \n4\n\nEnter the divisor: \n2\n\n4 / 2 == 2\n\n\n\n\nExercise 2\n\n\nGet a character from the user, and display its integer equivalent.\nThe keyword for the character datatype is \nchar\n.\n\n\nExample:\n\n\n\n\nEnter a character: \nc\n\n'c' in decimal is 99.\n\n\n\n\n\n\n\nExercise 3\n\n\nGet a 5-character word from the user.\nConvert it to the \"proper\" capitalization (first letter is capitalized, and the rest are lowercase).\n\n\nExample:\n\n\n\n\nEnter a 5-character word: \nhElLo\n\nYour word is Hello.\n\n\n\n\nExercise 4\n\n\nWrite a program to perform modulus between two floating-point values.\nThe modulus operator \n%\n will not work on doubles.\nDo not use \nfmod\n from the cmath library (although you can use it to verify your results).\nDo not worry about negative values or modding by 0.\n\n\nHere is a hint:\n\n\n\n\nFor two positive integers N (numerator) and D (denominator),\n\nN can be expressed as D*m + R.\n\nm is some integer multiple of D.\n\nR is the remainder of the division between N and D.\n\nR = N - D*m\n\nR and m are unknowns in this equation.\n\nFind m to solve for R.\n\n\n\n\nExamples:\n\n\n\n\nEnter the dividend: \n23.4\n\nEnter the divisor: \n3.2\n\n23.4 % 3.2 == 1\n\n\nEnter the dividend: \n54.7\n\nEnter the divisor: \n3.14\n\n54.7 % 3.14 == 1.32\n\n\n\n\nExercise 5 (advanced)\n\n\nUse modulus and division to print the binary value of a character.\n\n\nExample:\n\n\n\n\nEnter a character: \nc\n\n'c' in binary is 01100011.\n\n\n\n\nHint: once you have the decimal value of a character [part 3],\nyou can google something like \"\n99 in binary\n\"\nto double-check your results.\nAlso, characters all have 8 bits.\n\n\n\n\n\nQuiz!\n\n\nquiz02",
            "title": "Lab 2: Variables and Math"
        },
        {
            "location": "/lab02/#exercise-1",
            "text": "Ask the user for 2 numbers, then divide them and show the result.  Example:   Enter the dividend:  4 \nEnter the divisor:  2 \n4 / 2 == 2",
            "title": "Exercise 1"
        },
        {
            "location": "/lab02/#exercise-2",
            "text": "Get a character from the user, and display its integer equivalent.\nThe keyword for the character datatype is  char .  Example:   Enter a character:  c \n'c' in decimal is 99.",
            "title": "Exercise 2"
        },
        {
            "location": "/lab02/#exercise-3",
            "text": "Get a 5-character word from the user.\nConvert it to the \"proper\" capitalization (first letter is capitalized, and the rest are lowercase).  Example:   Enter a 5-character word:  hElLo \nYour word is Hello.",
            "title": "Exercise 3"
        },
        {
            "location": "/lab02/#exercise-4",
            "text": "Write a program to perform modulus between two floating-point values.\nThe modulus operator  %  will not work on doubles.\nDo not use  fmod  from the cmath library (although you can use it to verify your results).\nDo not worry about negative values or modding by 0.  Here is a hint:   For two positive integers N (numerator) and D (denominator), \nN can be expressed as D*m + R. \nm is some integer multiple of D. \nR is the remainder of the division between N and D. \nR = N - D*m \nR and m are unknowns in this equation. \nFind m to solve for R.   Examples:   Enter the dividend:  23.4 \nEnter the divisor:  3.2 \n23.4 % 3.2 == 1  Enter the dividend:  54.7 \nEnter the divisor:  3.14 \n54.7 % 3.14 == 1.32",
            "title": "Exercise 4"
        },
        {
            "location": "/lab02/#exercise-5-advanced",
            "text": "Use modulus and division to print the binary value of a character.  Example:   Enter a character:  c \n'c' in binary is 01100011.   Hint: once you have the decimal value of a character [part 3],\nyou can google something like \" 99 in binary \"\nto double-check your results.\nAlso, characters all have 8 bits.",
            "title": "Exercise 5 (advanced)"
        },
        {
            "location": "/lab02/#quiz",
            "text": "quiz02",
            "title": "Quiz!"
        },
        {
            "location": "/dis03/",
            "text": "Introduction\n\n\nA variable of \nchar\n type can store a\n\nsingle character\n.\n\nCharacter literals must be declared using\n\nsingle quotes\n.\n\n\nASCII\n\nis a standard for encoding characters to numbers.\n\nAn\n\nescape sequence\n\nis a two-character sequence that represent a special character. Example: \n'\\n'\n\n\nAn initialized variable whose value cannot change is called a \n\n\nconstant variable\n.\n\n\nAn \n\noverflow\n\noccurs when the value being assigned to a variable is greater than the maximum value the variable can store.\n\n\nWhen debugging compiler error messages, start from the\n\ntop\n\nof the error list, and\n\nrecompile\n\nafter fixing one problem.\n\n\nVariables of type \nbool\n store\n\ntrue\n\nand\n\nfalse\n\nvalues.\n\n\nBranch statements are surrounded by\n\nBraces {}\n.\n\nBranch conditions are surrounded by\n\nParentheses ()\n.\n\n\nPutting branches inside other branches is called nesting.\n\n\nThe 6 comparison operators are:\n\n>\n,\n\n<=\n,\n\n<\n,\n\n<=\n,\n\n==\n, and \n\n!=\n.\n\nThe results of these operators are of type\n\nbool\n.\n\n\nThe 3 logical operators are \n&&\n, \n||\n, and \n!\n.\n\n\n&&\n evaluates to true when \n\nboth\n\nof its operands are\n\ntrue\n,\nand false otherwise.\n\n\n||\n evaluates to true when\n\neither\n\nof its operands are\n\ntrue\n,\nand false otherwise.\n\n\n!\n evaluates to true when its operand is\n\nfalse\n.\n\n\nCode tracing\n\n\nWhat does each main function ouptut?\nAssume all required libraries are included.\nRefer to the last section for extra help.\n\n\n// 1\nint main() {\n    char c1 = 'x';\n    char c2 = c1 - 'a' + 'A';\n\n    cout << c1 << ' ' << c2 << endl;\n\n    c1 += 1;\n    c2 += 1;\n\n    cout << c1 << ' ' << c2 << endl;\n\n    return 0;\n}\n\n\n\n\n// 2\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n\n    if (i > k) {\n        i *= k;\n    }\n\n    if (j < i) {\n        j *= i;\n    } else {\n        j /= 5;\n    }\n\n    if (j * 3 > -k) {\n        k = -k / 3;\n    } else if (j * 3 < -k) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (i > 0) {\n        i = k;\n    } else if (k > 0) {\n        k = i;\n    } else if (j > 0) {\n        j = i;\n    }\n\n    cout << \"i = \" << i << endl;\n    cout << \"j = \" << j << endl;\n    cout << \"k = \" << k << endl;\n\n    return 0;\n}\n\n\n\n\n// 3\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n    bool b1 = true;\n\n    if (i > k && !b1) {\n        i *= k;\n    }\n\n    if (j < i && b1) {\n        j *= i;\n    } else {\n        j /= 5;\n    }\n\n    if (!(j * 3 > -k)) {\n        k = -k / 3;\n    } else if (j * 3 <= -k) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (!(i > 0) || (j - i > 0)) {\n        i = k;\n    } else if (((k > 0) && !(-k < 0)) || b1) {\n        k = i;\n    } else if (!(j > 0) || (i - j > 0)) {\n        j = i;\n    }\n\n    cout << \"i = \" << i << endl;\n    cout << \"j = \" << j << endl;\n    cout << \"k = \" << k << endl;\n\n    return 0;\n}\n\n\n\n\n// 4\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n    bool b1 = true;\n\n    if (i > k && b1) {\n        if (-i < -k || !b1) {\n            k += 5;\n        }\n        i *= k;\n    }\n\n    if (j >= i) {\n        if (j == i) {\n            j -= 6;\n        }\n        j /= i;\n    } else {\n        if (j > k && j < i) {\n            j -= 1;\n        }\n        j *= 5;\n    }\n\n    if (j * 3 > k) {\n        if (!(j * 3 <= -k)) {\n            b1 = !b1;\n        }\n        k = -k * 3;\n    } else if (j * 3 <= -k || b1) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (!(i > 0) || (j - i > 0)) {\n        i = k;\n        if (i == k) {\n            k += 6;\n        }\n    } else if (((k > 0) && !(-k < 0)) || b1) {\n        k = i;\n        if (b1) {\n            i += 6;   \n        }\n    } else if (!(j > 0) || (i - j > 0)) {\n        j = i;\n        if (b1) {\n            j += 6;\n        } else if (b1 || !b1) {\n            i += 3;\n        }\n    }\n\n    cout << \"i = \" << i << endl;\n    cout << \"j = \" << j << endl;\n    cout << \"k = \" << k << endl;\n\n    return 0;\n}\n\n\n\n\n//5\nint main(){\n    int j = 1;\n    int k = 2;\n    bool b = false;\n\n    if(j || k){\n        k = 0;\n    }\n\n    if(k){\n        j = 0;\n    }\n\n    if((j == k) || (b = true)){\n        k -= 2;\n    }\n    else if(!b){\n        j += 3;\n        k -= 4;\n    }\n    else{\n        j *= k;\n    }\n\n\n    cout << \"j = \" << j << endl;\n    cout << \"k = \" << k << endl;\n    return 0;\n}\n//careful...\n\n\n\n\nExtra Help\n\n\n\n\nASCII Table",
            "title": "Discussion 3: Characters and Branches"
        },
        {
            "location": "/dis03/#introduction",
            "text": "A variable of  char  type can store a single character . \nCharacter literals must be declared using single quotes .  ASCII \nis a standard for encoding characters to numbers. \nAn escape sequence \nis a two-character sequence that represent a special character. Example:  '\\n'  An initialized variable whose value cannot change is called a   constant variable .  An  overflow \noccurs when the value being assigned to a variable is greater than the maximum value the variable can store.  When debugging compiler error messages, start from the top \nof the error list, and recompile \nafter fixing one problem.  Variables of type  bool  store true \nand false \nvalues.  Branch statements are surrounded by Braces {} . \nBranch conditions are surrounded by Parentheses () .  Putting branches inside other branches is called nesting.  The 6 comparison operators are: > , <= , < , <= , == , and  != . \nThe results of these operators are of type bool .  The 3 logical operators are  && ,  || , and  ! .  &&  evaluates to true when  both \nof its operands are true ,\nand false otherwise.  ||  evaluates to true when either \nof its operands are true ,\nand false otherwise.  !  evaluates to true when its operand is false .",
            "title": "Introduction"
        },
        {
            "location": "/dis03/#code-tracing",
            "text": "What does each main function ouptut?\nAssume all required libraries are included.\nRefer to the last section for extra help.  // 1\nint main() {\n    char c1 = 'x';\n    char c2 = c1 - 'a' + 'A';\n\n    cout << c1 << ' ' << c2 << endl;\n\n    c1 += 1;\n    c2 += 1;\n\n    cout << c1 << ' ' << c2 << endl;\n\n    return 0;\n}  // 2\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n\n    if (i > k) {\n        i *= k;\n    }\n\n    if (j < i) {\n        j *= i;\n    } else {\n        j /= 5;\n    }\n\n    if (j * 3 > -k) {\n        k = -k / 3;\n    } else if (j * 3 < -k) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (i > 0) {\n        i = k;\n    } else if (k > 0) {\n        k = i;\n    } else if (j > 0) {\n        j = i;\n    }\n\n    cout << \"i = \" << i << endl;\n    cout << \"j = \" << j << endl;\n    cout << \"k = \" << k << endl;\n\n    return 0;\n}  // 3\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n    bool b1 = true;\n\n    if (i > k && !b1) {\n        i *= k;\n    }\n\n    if (j < i && b1) {\n        j *= i;\n    } else {\n        j /= 5;\n    }\n\n    if (!(j * 3 > -k)) {\n        k = -k / 3;\n    } else if (j * 3 <= -k) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (!(i > 0) || (j - i > 0)) {\n        i = k;\n    } else if (((k > 0) && !(-k < 0)) || b1) {\n        k = i;\n    } else if (!(j > 0) || (i - j > 0)) {\n        j = i;\n    }\n\n    cout << \"i = \" << i << endl;\n    cout << \"j = \" << j << endl;\n    cout << \"k = \" << k << endl;\n\n    return 0;\n}  // 4\nint main() {\n    int i = 2;\n    int j = 5;\n    int k = -3;\n    bool b1 = true;\n\n    if (i > k && b1) {\n        if (-i < -k || !b1) {\n            k += 5;\n        }\n        i *= k;\n    }\n\n    if (j >= i) {\n        if (j == i) {\n            j -= 6;\n        }\n        j /= i;\n    } else {\n        if (j > k && j < i) {\n            j -= 1;\n        }\n        j *= 5;\n    }\n\n    if (j * 3 > k) {\n        if (!(j * 3 <= -k)) {\n            b1 = !b1;\n        }\n        k = -k * 3;\n    } else if (j * 3 <= -k || b1) {\n        j = j * 3;\n        k = -k;\n    }\n\n    if (!(i > 0) || (j - i > 0)) {\n        i = k;\n        if (i == k) {\n            k += 6;\n        }\n    } else if (((k > 0) && !(-k < 0)) || b1) {\n        k = i;\n        if (b1) {\n            i += 6;   \n        }\n    } else if (!(j > 0) || (i - j > 0)) {\n        j = i;\n        if (b1) {\n            j += 6;\n        } else if (b1 || !b1) {\n            i += 3;\n        }\n    }\n\n    cout << \"i = \" << i << endl;\n    cout << \"j = \" << j << endl;\n    cout << \"k = \" << k << endl;\n\n    return 0;\n}  //5\nint main(){\n    int j = 1;\n    int k = 2;\n    bool b = false;\n\n    if(j || k){\n        k = 0;\n    }\n\n    if(k){\n        j = 0;\n    }\n\n    if((j == k) || (b = true)){\n        k -= 2;\n    }\n    else if(!b){\n        j += 3;\n        k -= 4;\n    }\n    else{\n        j *= k;\n    }\n\n\n    cout << \"j = \" << j << endl;\n    cout << \"k = \" << k << endl;\n    return 0;\n}\n//careful...",
            "title": "Code tracing"
        },
        {
            "location": "/dis03/#extra-help",
            "text": "ASCII Table",
            "title": "Extra Help"
        },
        {
            "location": "/lab03/",
            "text": "Exercise 1\n\n\nTake in a number from the user (between -50 and 50) then output between which multiples of 10 the number is between and whether it is positive or negative.\nIf the number is 0, simply output that the number was 0. \nIf the number is a multiple of 10, output that the number was a positive/negative multiple of 10. \nIf the number is not between -50 and 50, inclusive, then do nothing.\n\n\nExample 1:\n\n\n\n\nEnter a number: \n-37\n\nYour number is negative and between -30 and -40\n\n\n\n\nExample 2:\n\n\n\n\nEnter a number: \n40\n\nYour number is a positive multiple of 10\n\n\n\n\nExample 3:\n\n\n\n\nEnter a number: \n0\n\nYour number is 0\n\n\n\n\nExercise 2\n\n\nTake in a 5-character word from the user.\n\nThen, convert the \"word\" to proper capitalization (first letter is capitalized, and the rest lowercase).\n\n\nExample:\n\n\n\n\nEnter a 5-letter word: \nhElLo\n\nYour word is Hello.\n\n\n\n\nExercise 3\n\n\nGet a character from the user, and display its integer equivalent.\nIf it is a letter, print the opposite case.\nAdditionally, print the integer equivqalent of the opposite case if applicable.\n\n\nExample:\n\n\n\n\nEnter a character: \nc\n\n'c' in decimal is 99.\n\n'C' in decimal is 67.\n\n\nEnter a character: \n=\n\n'=' in decimal is 61.\n\n\n\n\nExercise 4\n\n\nCreate a password guessing game where a user attempts to break your passcode based on hints.\nUsing 4 integers, decide the relationship (less than, greather than, equal to, twice as much, etc)\nbetween any number of your integers. These relationships is what defines your passcode.\nFor example, my passcode could be:\nnum1 has to be greather than num2, num2 has to be less than num3 and num3 has to be equal to num4.\nThe user is then prompted to enter 4 numbers and told whether each number fits your specifications\nor does not. A message is then prompted saying whether the user failed or succeeded.\n\n\nExample:\n\n\n\n\nEnter 4 numbers: \n12, 2, 600, 4\n \n\nThe first number looks good! \n\nThe second number looks good! \n\nThe third number needs some fixing... \n\nThe fourth number needs some fixing... \n\nSorry you didn't break the code!\n\n\nEnter 4 numbers: \n12, 2, 6, 3\n \n\nThe first number looks good! \n\nThe second number looks good! \n\nThe third number looks good! \n\nThe fourth looks good! \n\nCongrats! You broke the code! :)\n\n\n\n\n(Challenge: Instead of integers, use floating point numbers)\n\n\npssst SI Leaders, this is a helpful example to slowly introduce loops if you'd like.\nThe program does not have to terminate after every attempt, keep it going with a while.\n\n\nQuiz!\n\n\nquiz03",
            "title": "Lab 3: Characters and Branches"
        },
        {
            "location": "/lab03/#exercise-1",
            "text": "Take in a number from the user (between -50 and 50) then output between which multiples of 10 the number is between and whether it is positive or negative.\nIf the number is 0, simply output that the number was 0. \nIf the number is a multiple of 10, output that the number was a positive/negative multiple of 10. \nIf the number is not between -50 and 50, inclusive, then do nothing.  Example 1:   Enter a number:  -37 \nYour number is negative and between -30 and -40   Example 2:   Enter a number:  40 \nYour number is a positive multiple of 10   Example 3:   Enter a number:  0 \nYour number is 0",
            "title": "Exercise 1"
        },
        {
            "location": "/lab03/#exercise-2",
            "text": "Take in a 5-character word from the user. \nThen, convert the \"word\" to proper capitalization (first letter is capitalized, and the rest lowercase).  Example:   Enter a 5-letter word:  hElLo \nYour word is Hello.",
            "title": "Exercise 2"
        },
        {
            "location": "/lab03/#exercise-3",
            "text": "Get a character from the user, and display its integer equivalent.\nIf it is a letter, print the opposite case.\nAdditionally, print the integer equivqalent of the opposite case if applicable.  Example:   Enter a character:  c \n'c' in decimal is 99. \n'C' in decimal is 67.  Enter a character:  = \n'=' in decimal is 61.",
            "title": "Exercise 3"
        },
        {
            "location": "/lab03/#exercise-4",
            "text": "Create a password guessing game where a user attempts to break your passcode based on hints.\nUsing 4 integers, decide the relationship (less than, greather than, equal to, twice as much, etc)\nbetween any number of your integers. These relationships is what defines your passcode.\nFor example, my passcode could be:\nnum1 has to be greather than num2, num2 has to be less than num3 and num3 has to be equal to num4.\nThe user is then prompted to enter 4 numbers and told whether each number fits your specifications\nor does not. A message is then prompted saying whether the user failed or succeeded.  Example:   Enter 4 numbers:  12, 2, 600, 4   \nThe first number looks good!  \nThe second number looks good!  \nThe third number needs some fixing...  \nThe fourth number needs some fixing...  \nSorry you didn't break the code!  Enter 4 numbers:  12, 2, 6, 3   \nThe first number looks good!  \nThe second number looks good!  \nThe third number looks good!  \nThe fourth looks good!  \nCongrats! You broke the code! :)   (Challenge: Instead of integers, use floating point numbers)  pssst SI Leaders, this is a helpful example to slowly introduce loops if you'd like.\nThe program does not have to terminate after every attempt, keep it going with a while.",
            "title": "Exercise 4"
        },
        {
            "location": "/lab03/#quiz",
            "text": "quiz03",
            "title": "Quiz!"
        },
        {
            "location": "/dis04/",
            "text": "Introduction\n\n\nYou can compare two strings for similarity using the\n\n==\n\nor\n\n==\n\noperator.\nFor two strings to be considered equal, they must have the same number of\n\ncharacters\n\nand each corresponding character must be\n\nidentical\n.\n\n\nThe operators\n\n<, <=, >, >=\n\ncan also be used to order strings \n\nvalues\n.\n\n\nThe string accessor function \n.at(i)\n returns\n\na character\n\nat the ith value of the string\nThe string accessor function \n.size()\n returns\n\nthe number of chars in the string\n\nor the length of the string.\n\nsubstr(i,j)\n would split a string into a substring from index\n\ni\n\nand until index\n\ni+j\n\n\ntoupper('c')\n and \ntolower('C')\n are char functions that return the\n\nlowercase and uppercase\n\nof the character arguments, respectively.\n\n\nFloating point numbers should not be compared using \n==\n because they are sometimes not\n\nprecise\n\nenough.\nInstead, to compare to floating point variables \nf1\n and \nf2\n where \nf1 > f2\n, make sure to use a formula similar to the following:\n\n(f1-f2)<.00001\n.\n\n\nLoops allow you to control the\n\nflow\n\nof your program by repeating actions.\nEach loop style contains a condition section.\nThe block will execute as long as the provided condition evaluates to\n\ntrue\n.\n\n\nOne type of loop that is visually similar to an \nif\n statement is a \n\nwhile\n\nloop.\nBoth contain a single expression that evaluates to \ntrue\n or \nfalse\n.\nThis expression determines whether or not the body of the loop will be\n\nexecuted\n.\n\n\nA while loop will continue to execute until\n\nits conditional expression evaluates to false\n.\nThe condition of a while loop evaluates once per iteration of the loop.\n\n\nfor\n loops are similar to \nwhile\n loops.\nFor loops are composed of\n\nan initialization statement\n,\n\na conditional expression\n, and\n\nan update action\n.\nThe conditional expression of a \nfor\n loop is evaluated\n\nbefore\n\nthe body is executed.\n\n\nAlthough \nfor\n and \nwhile\n loops can be used interchangeably, each is stylistically better suited for different tasks.\nA \nfor\n loop should be used when the number of loop iterations is\n\nknown\n.\nA \nwhile\n loop should be used when the number of loop iterations is\n\nunknown\n.\n\n\nCode tracing\n\n\nWhat does each main function ouptut?\nAssume all required libraries are included.\n\n\n// 1\nint main() {\n    string Z = \"Z\";\n    string a = \"a\";\n\n    if (Z < a) {\n        cout << \"'Z' comes before 'a' lexicographically\" << endl;\n    }\n    else {\n        cout << \"'a' comes before 'Z' lexicographically\" << endl;\n    }\n\n    Z.append(\"ebra\");\n    cout << \"Length = \" << Z.length() << endl;\n    cout << \"Size = \" << Z.size() << endl;\n\n    Z.clear();\n    cout << \"Length = \" << Z.size() << endl;\n\n    Z = \"hello\";\n    cout << Z.at(0) << a << Z.at(2) << Z.at(4) << endl;\n\n    Z.insert(0,\"c\");\n    cout << Z << endl;\n\n    cout << Z.substr(1,2) << \" is awesome.\" << endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int counter = 0;\n    int counter2 = 0;\n\n    for (int i = 0; i < 5; i++) {\n        counter += 1;\n    }\n    cout << counter << endl;\n\n    for (int i = 0; i < 4; i++) {\n        counter *= 2;\n    }\n    cout << counter << endl;\n\n    counter = counter / 10;\n\n    for (int i = 28; i > counter; i = i - 2) {\n        cout << counter2;\n        counter2++;\n    }\n    cout << endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    bool b = true;\n    int a = 0;\n\n    while (b) {\n        cout << a;\n        if (a == 5) {\n            b = false;\n        }\n        a++;\n    }\n    cout << endl;\n\n    a = 0;\n\n    while (!b) {\n        a++;\n        if (a == 5){\n            b = true;\n        }\n        cout << a << endl;\n    }\n\n    double d = 12345;\n\n    while (d >= 1) {\n        d = d / 10;\n    }\n    cout << d << endl;\n\n    string s = \"Computer\";\n\n    while(s.size() != 0) {\n        cout << s << endl;\n        s.resize(s.size() - 1);\n    }\n\n    return 0;\n}\n\n// 4\n// FOR THESE QUESTIONS, how many times does each loop run?\nint main() {\n    // Loop A\n    for (int i = 0; i < 10; i++) {\n        if (i < 5) {\n            i *= 2;\n        }\n    }\n\n    int j = 10;\n\n    // Loop B\n    while (j != 0) {\n        if (j > 0) {\n            j -= 3;\n        }\n        if (j < 0) {\n            j += 5;\n        }\n    }\n\n    // Loop C\n    for (int i = 0; i < 30; i++) {\n        if (i % 3 == 2) {\n            i += 10;\n        }\n        else if (i % 3 == 1) {\n            i *= 2;\n        }\n        else {\n            i /= 3;\n        }\n    }\n\n    return 0;\n}",
            "title": "Discussion 4: Strings and Loops"
        },
        {
            "location": "/dis04/#introduction",
            "text": "You can compare two strings for similarity using the == \nor == \noperator.\nFor two strings to be considered equal, they must have the same number of characters \nand each corresponding character must be identical .  The operators <, <=, >, >= \ncan also be used to order strings  values .  The string accessor function  .at(i)  returns a character \nat the ith value of the string\nThe string accessor function  .size()  returns the number of chars in the string \nor the length of the string. substr(i,j)  would split a string into a substring from index i \nand until index i+j  toupper('c')  and  tolower('C')  are char functions that return the lowercase and uppercase \nof the character arguments, respectively.  Floating point numbers should not be compared using  ==  because they are sometimes not precise \nenough.\nInstead, to compare to floating point variables  f1  and  f2  where  f1 > f2 , make sure to use a formula similar to the following: (f1-f2)<.00001 .  Loops allow you to control the flow \nof your program by repeating actions.\nEach loop style contains a condition section.\nThe block will execute as long as the provided condition evaluates to true .  One type of loop that is visually similar to an  if  statement is a  while \nloop.\nBoth contain a single expression that evaluates to  true  or  false .\nThis expression determines whether or not the body of the loop will be executed .  A while loop will continue to execute until its conditional expression evaluates to false .\nThe condition of a while loop evaluates once per iteration of the loop.  for  loops are similar to  while  loops.\nFor loops are composed of an initialization statement , a conditional expression , and an update action .\nThe conditional expression of a  for  loop is evaluated before \nthe body is executed.  Although  for  and  while  loops can be used interchangeably, each is stylistically better suited for different tasks.\nA  for  loop should be used when the number of loop iterations is known .\nA  while  loop should be used when the number of loop iterations is unknown .",
            "title": "Introduction"
        },
        {
            "location": "/dis04/#code-tracing",
            "text": "What does each main function ouptut?\nAssume all required libraries are included.  // 1\nint main() {\n    string Z = \"Z\";\n    string a = \"a\";\n\n    if (Z < a) {\n        cout << \"'Z' comes before 'a' lexicographically\" << endl;\n    }\n    else {\n        cout << \"'a' comes before 'Z' lexicographically\" << endl;\n    }\n\n    Z.append(\"ebra\");\n    cout << \"Length = \" << Z.length() << endl;\n    cout << \"Size = \" << Z.size() << endl;\n\n    Z.clear();\n    cout << \"Length = \" << Z.size() << endl;\n\n    Z = \"hello\";\n    cout << Z.at(0) << a << Z.at(2) << Z.at(4) << endl;\n\n    Z.insert(0,\"c\");\n    cout << Z << endl;\n\n    cout << Z.substr(1,2) << \" is awesome.\" << endl;\n\n    return 0;\n}\n\n// 2\nint main() {\n    int counter = 0;\n    int counter2 = 0;\n\n    for (int i = 0; i < 5; i++) {\n        counter += 1;\n    }\n    cout << counter << endl;\n\n    for (int i = 0; i < 4; i++) {\n        counter *= 2;\n    }\n    cout << counter << endl;\n\n    counter = counter / 10;\n\n    for (int i = 28; i > counter; i = i - 2) {\n        cout << counter2;\n        counter2++;\n    }\n    cout << endl;\n\n    return 0;\n}\n\n// 3\nint main() {\n    bool b = true;\n    int a = 0;\n\n    while (b) {\n        cout << a;\n        if (a == 5) {\n            b = false;\n        }\n        a++;\n    }\n    cout << endl;\n\n    a = 0;\n\n    while (!b) {\n        a++;\n        if (a == 5){\n            b = true;\n        }\n        cout << a << endl;\n    }\n\n    double d = 12345;\n\n    while (d >= 1) {\n        d = d / 10;\n    }\n    cout << d << endl;\n\n    string s = \"Computer\";\n\n    while(s.size() != 0) {\n        cout << s << endl;\n        s.resize(s.size() - 1);\n    }\n\n    return 0;\n}\n\n// 4\n// FOR THESE QUESTIONS, how many times does each loop run?\nint main() {\n    // Loop A\n    for (int i = 0; i < 10; i++) {\n        if (i < 5) {\n            i *= 2;\n        }\n    }\n\n    int j = 10;\n\n    // Loop B\n    while (j != 0) {\n        if (j > 0) {\n            j -= 3;\n        }\n        if (j < 0) {\n            j += 5;\n        }\n    }\n\n    // Loop C\n    for (int i = 0; i < 30; i++) {\n        if (i % 3 == 2) {\n            i += 10;\n        }\n        else if (i % 3 == 1) {\n            i *= 2;\n        }\n        else {\n            i /= 3;\n        }\n    }\n\n    return 0;\n}",
            "title": "Code tracing"
        },
        {
            "location": "/lab04/",
            "text": "Exercise 1\n\n\nGet two integers from the user and multiply them without using the \n*\n operator.\n\n\nExample:\n\n\n\n\nEnter two numbers: \n5 6\n\n5 * 6 = 30\n\n\n\n\nBonus\n:\n\n\nConsider the input cases \n10000 2\n and \n2 10000\n.\nModify your code so you loop as few times as possible in both cases.\n\n\nExercise 2\n\n\nWrite a program that prints a collatz conjecture sequence.\nThe collatz conjecture is defined as follows:\n\n\n\n\nTake any positive integer \nn\n\nIf \nn\n is even, divide it by two.\n\nIf \nn\n is odd, multiply it by 3 and add 1\n\nRepeat this until \nn == 1\n\n\n\n\nThe collatz conjecture states that no matter what \nn\n you choose, you will always end up at 1.\nNo one has found a number that does \nnot\n satisfy this conjecture.\nNo one has proven that all numbers eventually lead to 1.\n\n\nExample:\n\n\n\n\nEnter an integer: \n3\n\n10\n\n5\n\n16\n\n8\n\n4\n\n2\n\n1\n\n\n\n\nTake a look at the \ncollatz conjecture on wikipedia\n if you would like to read more about it.\n\n\nExercise 3\n\n\nGet a word from the user.\nRepeat the word, removing one letter at a time (see example below).\nStop printing when there are no more characters.\n\n\nBonus 1\n:\n\n\nGet an entire line of text from the user.\n\n\nBonus 2\n:\n\n\nAlways reduce the printed word by one \nvisible\n character (spaces are not visible).\nThere is a function in the \ncctype\n library that you may use to determine if a character is a space or not.\n\n\nExample:\n\n\n\n\nEnter a word: \nTest\n\nTest \n\nTes \n\nTe \n\nT\n\n\n\n\nBonus 2 example:\n\n\n\n\nEnter a phrase: \nHey there!\n\nHey there\n\nHey ther\n\nHey the\n\nHey th\n\nHey t\n\nHey\n\nHe\n\nH\n\n\n\n\nAn \nincorrect\n version of bonus 2:\n\n\n\n\nEnter a phrase: \nHey there!\n\nHey there\n\nHey ther\n\nHey the\n\nHey th\n\nHey t\n\nHey \n\nHey\n\nHe\n\nH\n\n\n\n\n(notice the repetition)\n\n\nExercise 4\n\n\nWrite a program that takes a phrase and prints it reversed.\n\nNote\n: you do not need to reverse the string, just \nprint\n it reversed.\n\n\nBonus\n:\n\n\nIf it is a palindrome, output a sentnce saying so.\n\n\nExample 1:\n\n\n\n\nEnter a phrase: \nAndre Castro\n\nortsaC erdnA\n\n\n\n\nBonus Example:\n\n\n\n\nEnter a phrase: \nlionoil\n\nlionoil\n\nlionoil is a palindrome!\n\n\n\n\nExercise 5\n\n\nPassword-protect one of the previous exercises from this lab.\nThe user gets at least 5 attempts to guess the password before the program quits with a failure message.\nThe maximum number of tries is up to you.\nRead a single word as the password.\nOutput a hint if the user gets it wrong.\n\n\n[Bonus]: treat words with lowercase and uppercase letters the same.\n For instance, \nWorD\n and \nwoRd\n should both be considered correct.\n\n\nExample 1:\n\n\n\n\nEnter a word: \nTest\n \n\nThe word \"Test\" is incorrect. Hint: it is green.\n\nEnter another word: \nGrass\n\nThe word \"Grass\" is correct!\n\n\n\n\nExmaple 2:\n\n\n\n\nEnter a word: \nTemporary\n\nThe word is incorrect. Hint: it starts with s\n\nEnter another word: \nSentence\n\nThe word is incorrect. Hint: it starts with s\n\nEnter another word: \nStilts\n\nThe word is incorrect. Hint: it starts with s\n\nEnter another word: \nSit\n\nThe word is incorrect. Hint: it starts with s\n\nEnter another word: \nStow\n\nIm sorry. You failed to guesss the word. Goodbye.\n\n\n\n\nQuiz!\n\n\nquiz04",
            "title": "Lab Week 4: Strings and loops"
        },
        {
            "location": "/lab04/#exercise-1",
            "text": "Get two integers from the user and multiply them without using the  *  operator.  Example:   Enter two numbers:  5 6 \n5 * 6 = 30   Bonus :  Consider the input cases  10000 2  and  2 10000 .\nModify your code so you loop as few times as possible in both cases.",
            "title": "Exercise 1"
        },
        {
            "location": "/lab04/#exercise-2",
            "text": "Write a program that prints a collatz conjecture sequence.\nThe collatz conjecture is defined as follows:   Take any positive integer  n \nIf  n  is even, divide it by two. \nIf  n  is odd, multiply it by 3 and add 1 \nRepeat this until  n == 1   The collatz conjecture states that no matter what  n  you choose, you will always end up at 1.\nNo one has found a number that does  not  satisfy this conjecture.\nNo one has proven that all numbers eventually lead to 1.  Example:   Enter an integer:  3 \n10 \n5 \n16 \n8 \n4 \n2 \n1   Take a look at the  collatz conjecture on wikipedia  if you would like to read more about it.",
            "title": "Exercise 2"
        },
        {
            "location": "/lab04/#exercise-3",
            "text": "Get a word from the user.\nRepeat the word, removing one letter at a time (see example below).\nStop printing when there are no more characters.  Bonus 1 :  Get an entire line of text from the user.  Bonus 2 :  Always reduce the printed word by one  visible  character (spaces are not visible).\nThere is a function in the  cctype  library that you may use to determine if a character is a space or not.  Example:   Enter a word:  Test \nTest  \nTes  \nTe  \nT   Bonus 2 example:   Enter a phrase:  Hey there! \nHey there \nHey ther \nHey the \nHey th \nHey t \nHey \nHe \nH   An  incorrect  version of bonus 2:   Enter a phrase:  Hey there! \nHey there \nHey ther \nHey the \nHey th \nHey t \nHey  \nHey \nHe \nH   (notice the repetition)",
            "title": "Exercise 3"
        },
        {
            "location": "/lab04/#exercise-4",
            "text": "Write a program that takes a phrase and prints it reversed. Note : you do not need to reverse the string, just  print  it reversed.  Bonus :  If it is a palindrome, output a sentnce saying so.  Example 1:   Enter a phrase:  Andre Castro \nortsaC erdnA   Bonus Example:   Enter a phrase:  lionoil \nlionoil \nlionoil is a palindrome!",
            "title": "Exercise 4"
        },
        {
            "location": "/lab04/#exercise-5",
            "text": "Password-protect one of the previous exercises from this lab.\nThe user gets at least 5 attempts to guess the password before the program quits with a failure message.\nThe maximum number of tries is up to you.\nRead a single word as the password.\nOutput a hint if the user gets it wrong.  [Bonus]: treat words with lowercase and uppercase letters the same.\n For instance,  WorD  and  woRd  should both be considered correct.  Example 1:   Enter a word:  Test   \nThe word \"Test\" is incorrect. Hint: it is green. \nEnter another word:  Grass \nThe word \"Grass\" is correct!   Exmaple 2:   Enter a word:  Temporary \nThe word is incorrect. Hint: it starts with s \nEnter another word:  Sentence \nThe word is incorrect. Hint: it starts with s \nEnter another word:  Stilts \nThe word is incorrect. Hint: it starts with s \nEnter another word:  Sit \nThe word is incorrect. Hint: it starts with s \nEnter another word:  Stow \nIm sorry. You failed to guesss the word. Goodbye.",
            "title": "Exercise 5"
        },
        {
            "location": "/lab04/#quiz",
            "text": "quiz04",
            "title": "Quiz!"
        },
        {
            "location": "/dis05/",
            "text": "Introduction\n\n\nA loop that appears in the body of another loop is often called a\n\nnested loop\n.\n\n\nThe loops on the inside of a nested loop construct are called\n\ninner loops\n\nwhile the loop on the outside of a nested loop construct is called the\n\nouter loop\n\n\nBuilding a complex program by making small testable additions and changes is called \n\nincremental programming\n\n\nA loop construct that executes the body of the loop before checking the loop condition is called a\n\ndo-while loop\n\n\nDebugging Practice\n\n\nThe code below is supposed to continuously ask the user for a number and output the square of that number.\nWhen the user enters 0 the program should exit.\nUnfortunately, the program below does not even compile, although thats not the only problem...\n\n\nHow can you modify the following code so that it works correctly?\n\n\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int userInput = 0;\n\n    do {\n        cout << \"Enter a number: \";\n        cin >> input;\n        cout << endl;\n\n        cout << input << \" * \" << input << \" == \" << input * input << endl; \n\n    } while (input > 0)\n\n    return 0;\n}\n\n\n\n\nThe code below is supposed to output a word diagonally, but it does not seem to be working.\n\n\nFor example, when the user inputs \"hey\" the output should be:\n\n\n\nh\n e\n  y\n\n\n\n\nBut instead the output is:\n\n\n\nh  e  y\n\n\n\n\nHow can you modify the following code so that it works correctly?\n\n\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    string userInput;\n\n    cout << \"Enter a string: \";\n    getline(cin, userInput);\n    cout << endl;\n\n    for (int i = 0; i < userInput.size(); i++) {\n        for (int j = 0; j < userInput.size(); j++) {\n            if (i == j) {\n                cout << userInput.at(i);\n            }\n            else {\n                cout << ' ';\n            }\n        }\n    }\n    return 0;\n}\n\n\n\n\nCode Tracing\n\n\nFor the code below answer the following questions.\n\n\n\n\nWhat does this program output?\n\n\nWhat would happen if you switched the values of width and height? (That is, \nwidth = 13;\n and \nheight == 2;\n)\n\n\n\n\nint main(){\n    char start = 'a';\n    int width = 2;\n    int height = 13;\n\n    for (int i = 0; i < height; i++) {\n        for (int j = 0; j < width; j++) {\n            cout << start << ' ';\n            start++;\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n\n\n\n\nFor the code below answer the following questions.\n\n\n\n\nWhat does the code output if the user enters 2. What about if the user enters a 3 or a 4? That is, what does the main function output in the seperate cases of \nuserInput == 2\n, \nuserInput == 3\n, and \nuserInput == 4\n.\n\n\nWhat mathematical function does each part represent? (refer to the comments in the code if you are unsure what is meant by 'part')\n\n\nWhat mathematical function would we have if we incremented the variable \nresult\n in \nn\n nested for-loops?\n\n\n\n\nint main() {\n    int userInput = 0;\n\n    cout << \"Enter a number: \";\n    cin >> userInput;\n    cout << endl;\n\n    //PART 1\n    int result = 0;\n\n    for (int i = 0; i < userInput; i++) {\n        result++;\n    }\n\n    cout << result << endl;\n\n    //PART 2\n    result = 0;\n\n    for (int i = 0; i < userInput; i++) {\n        for (int j = 0; j < userInput; j++) {\n            reuslt++;\n        }\n    }\n\n    cout << result << endl;\n\n    //PART 3 \n    result = 0;\n\n    for (int i = 0; i < userInput; i++) {\n        for (int j = 0; j < userInput; j++) {\n            for (int k = 0; k < userInput; k++) {\n                result++;\n            }\n        }\n    }\n\n    cout << result << endl;\n    result = 0;\n\n    return 0;\n}",
            "title": "Discussion 5: Nested Loops and Do-While"
        },
        {
            "location": "/dis05/#introduction",
            "text": "A loop that appears in the body of another loop is often called a nested loop .  The loops on the inside of a nested loop construct are called inner loops \nwhile the loop on the outside of a nested loop construct is called the outer loop  Building a complex program by making small testable additions and changes is called  incremental programming  A loop construct that executes the body of the loop before checking the loop condition is called a do-while loop",
            "title": "Introduction"
        },
        {
            "location": "/dis05/#debugging-practice",
            "text": "The code below is supposed to continuously ask the user for a number and output the square of that number.\nWhen the user enters 0 the program should exit.\nUnfortunately, the program below does not even compile, although thats not the only problem...  How can you modify the following code so that it works correctly?  #include <iostream>\n\nusing namespace std;\n\nint main() {\n    int userInput = 0;\n\n    do {\n        cout << \"Enter a number: \";\n        cin >> input;\n        cout << endl;\n\n        cout << input << \" * \" << input << \" == \" << input * input << endl; \n\n    } while (input > 0)\n\n    return 0;\n}  The code below is supposed to output a word diagonally, but it does not seem to be working.  For example, when the user inputs \"hey\" the output should be:  \nh\n e\n  y  But instead the output is:  \nh  e  y  How can you modify the following code so that it works correctly?  #include <iostream>\n\nusing namespace std;\n\nint main() {\n    string userInput;\n\n    cout << \"Enter a string: \";\n    getline(cin, userInput);\n    cout << endl;\n\n    for (int i = 0; i < userInput.size(); i++) {\n        for (int j = 0; j < userInput.size(); j++) {\n            if (i == j) {\n                cout << userInput.at(i);\n            }\n            else {\n                cout << ' ';\n            }\n        }\n    }\n    return 0;\n}",
            "title": "Debugging Practice"
        },
        {
            "location": "/dis05/#code-tracing",
            "text": "For the code below answer the following questions.   What does this program output?  What would happen if you switched the values of width and height? (That is,  width = 13;  and  height == 2; )   int main(){\n    char start = 'a';\n    int width = 2;\n    int height = 13;\n\n    for (int i = 0; i < height; i++) {\n        for (int j = 0; j < width; j++) {\n            cout << start << ' ';\n            start++;\n        }\n        cout << endl;\n    }\n\n    return 0;\n}  For the code below answer the following questions.   What does the code output if the user enters 2. What about if the user enters a 3 or a 4? That is, what does the main function output in the seperate cases of  userInput == 2 ,  userInput == 3 , and  userInput == 4 .  What mathematical function does each part represent? (refer to the comments in the code if you are unsure what is meant by 'part')  What mathematical function would we have if we incremented the variable  result  in  n  nested for-loops?   int main() {\n    int userInput = 0;\n\n    cout << \"Enter a number: \";\n    cin >> userInput;\n    cout << endl;\n\n    //PART 1\n    int result = 0;\n\n    for (int i = 0; i < userInput; i++) {\n        result++;\n    }\n\n    cout << result << endl;\n\n    //PART 2\n    result = 0;\n\n    for (int i = 0; i < userInput; i++) {\n        for (int j = 0; j < userInput; j++) {\n            reuslt++;\n        }\n    }\n\n    cout << result << endl;\n\n    //PART 3 \n    result = 0;\n\n    for (int i = 0; i < userInput; i++) {\n        for (int j = 0; j < userInput; j++) {\n            for (int k = 0; k < userInput; k++) {\n                result++;\n            }\n        }\n    }\n\n    cout << result << endl;\n    result = 0;\n\n    return 0;\n}",
            "title": "Code Tracing"
        },
        {
            "location": "/lab05/",
            "text": "Mock Midterm\n\n\n\n\n\n\nMock Midterm\n\n\n\n\n\n\nSolutions",
            "title": "Lab Week 5: Mock Midterm"
        },
        {
            "location": "/lab05/#mock-midterm",
            "text": "Mock Midterm    Solutions",
            "title": "Mock Midterm"
        },
        {
            "location": "/lab06/",
            "text": "Exercise 1\n\n\nWrite a program that prints one random number in \n[1, 6]\n.\n\n\nExercise 2\n\n\nOutput a sideways \"skyline\" with random building heights.\nDo not print an empty line as part of the skyline.\nThe maximum height building need not be part of the skyline, but no building should be taller.\n\n\nExample:\n\n\n\n\nHow many buildings? \n7\n\nHow tall is the tallest building? \n9\n\n\n\nXXXXXXX\n\nXXX\n\nXXXX\n\nX\n\nXXXXXXXXX\n\nXXXX\n\nXXXX\n\n\n\n\nExercise 3\n\n\nWrite a program that prints \nn\n random numbers in \n[a, b]\n.\nThe values for \nn\n, \na\n, and \nb\n will come from the user.\n\na\n will be less than or equal to \nb\n.\n\n\nExample:\n\n\n\n\nHow many random numbers would you like? \n4\n\nWhat range should the numbers be in (space-separated)? \n-3 3\n\nYour random numbers are:\n\n-2\n\n3\n\n1\n\n-1\n\n\n\n\nBonus\n:\nAllow the user to enter the numbers in the wrong order.\nFor instance, they could enter \n3 -3\n and your program would output numbers in \n[-3, 3]\n.\n\n\nExercise 4\n\n\nImplement your own pseudo-random number generator.\n\n\nHINT:\nBe careful about big numbers.\nChoose your datatypes accordingly.\n\n\nAlgorithm:\n\n\n\n\nPick a number to mod by.\nWe will be using \n6947\n.\n\nPick a number to shift by.\nWe will be using \n27\n.\n\nPick a number to exponentiate by.\nWe will be using \n3\n.\n\nStart with some intial sequence value, called the \nseed\n (mod 6947)\n\nThe next term in the sequencee is the previous term plus the shift value, raised to the third power (mod 6947)\n\n\n\n\nExample:\n\n\n\n\nEnter the seed value: \n0\n\nHow many random numbers would you like? \n5\n\n5789\n\n2500\n\n2438\n\n2844\n\n267\n\n\n\n\nBonus\n:\n\n\nUse the current time to seed our random number generator.",
            "title": "Lab Week 6: Randomness"
        },
        {
            "location": "/lab06/#exercise-1",
            "text": "Write a program that prints one random number in  [1, 6] .",
            "title": "Exercise 1"
        },
        {
            "location": "/lab06/#exercise-2",
            "text": "Output a sideways \"skyline\" with random building heights.\nDo not print an empty line as part of the skyline.\nThe maximum height building need not be part of the skyline, but no building should be taller.  Example:   How many buildings?  7 \nHow tall is the tallest building?  9  \nXXXXXXX \nXXX \nXXXX \nX \nXXXXXXXXX \nXXXX \nXXXX",
            "title": "Exercise 2"
        },
        {
            "location": "/lab06/#exercise-3",
            "text": "Write a program that prints  n  random numbers in  [a, b] .\nThe values for  n ,  a , and  b  will come from the user. a  will be less than or equal to  b .  Example:   How many random numbers would you like?  4 \nWhat range should the numbers be in (space-separated)?  -3 3 \nYour random numbers are: \n-2 \n3 \n1 \n-1   Bonus :\nAllow the user to enter the numbers in the wrong order.\nFor instance, they could enter  3 -3  and your program would output numbers in  [-3, 3] .",
            "title": "Exercise 3"
        },
        {
            "location": "/lab06/#exercise-4",
            "text": "Implement your own pseudo-random number generator.  HINT:\nBe careful about big numbers.\nChoose your datatypes accordingly.  Algorithm:   Pick a number to mod by.\nWe will be using  6947 . \nPick a number to shift by.\nWe will be using  27 . \nPick a number to exponentiate by.\nWe will be using  3 . \nStart with some intial sequence value, called the  seed  (mod 6947) \nThe next term in the sequencee is the previous term plus the shift value, raised to the third power (mod 6947)   Example:   Enter the seed value:  0 \nHow many random numbers would you like?  5 \n5789 \n2500 \n2438 \n2844 \n267   Bonus :  Use the current time to seed our random number generator.",
            "title": "Exercise 4"
        }
    ]
}